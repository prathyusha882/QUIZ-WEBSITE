{"ast":null,"code":"// src/services/api.js\nimport axios from \"axios\";\n\n// ✅ No trailing slash in API_URL\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:8000/api\";\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// ✅ Request Interceptor – Attach JWT access token from localStorage\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"access_token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// ✅ Response Interceptor – Handle expired tokens & global errors\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const status = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status;\n  const originalRequest = error.config;\n\n  // 🟢 Handle expired/invalid token (401) with refresh attempt\n  if (status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const refreshToken = localStorage.getItem(\"refresh_token\");\n    if (refreshToken) {\n      try {\n        const refreshResponse = await axios.post(`${API_URL}/token/refresh/`, {\n          refresh: refreshToken\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const newAccessToken = refreshResponse.data.access;\n        if (newAccessToken) {\n          localStorage.setItem(\"access_token\", newAccessToken);\n          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n          return api(originalRequest); // Retry the original request\n        }\n      } catch (refreshError) {\n        var _refreshError$respons, _refreshError$respons2, _refreshError$respons3, _refreshError$respons4;\n        console.warn(\"Token refresh failed:\", refreshError);\n\n        // If token is blacklisted or not valid, stop retrying\n        if (((_refreshError$respons = refreshError.response) === null || _refreshError$respons === void 0 ? void 0 : (_refreshError$respons2 = _refreshError$respons.data) === null || _refreshError$respons2 === void 0 ? void 0 : _refreshError$respons2.code) === \"token_not_valid\" || ((_refreshError$respons3 = refreshError.response) === null || _refreshError$respons3 === void 0 ? void 0 : (_refreshError$respons4 = _refreshError$respons3.data) === null || _refreshError$respons4 === void 0 ? void 0 : _refreshError$respons4.detail) === \"Token is blacklisted\") {\n          clearAuthDataAndRedirect();\n          return Promise.reject(refreshError);\n        }\n      }\n    }\n\n    // ❌ If refresh fails or no refresh token, clear data & redirect\n    clearAuthDataAndRedirect();\n    return Promise.reject(error);\n  }\n  if (status === 403) {\n    console.warn(\"Forbidden: You do not have permission to perform this action.\");\n  }\n  return Promise.reject(error);\n});\n\n// Helper to clear all auth-related storage and redirect to login\nfunction clearAuthDataAndRedirect() {\n  localStorage.removeItem(\"access_token\");\n  localStorage.removeItem(\"refresh_token\");\n  localStorage.removeItem(\"user_id\");\n  localStorage.removeItem(\"user_email\");\n  localStorage.removeItem(\"user_name\");\n  localStorage.removeItem(\"quiz_isAuthenticated\");\n  window.location.href = \"/login\";\n}\n\n// 🆕 Login helper – ensures we always send username instead of email\nexport const loginUser = (email, password) => {\n  return api.post(\"token/\", {\n    username: email,\n    // ✅ Backend expects \"username\"\n    password\n  });\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","originalRequest","_retry","refreshToken","refreshResponse","post","refresh","newAccessToken","data","access","setItem","refreshError","_refreshError$respons","_refreshError$respons2","_refreshError$respons3","_refreshError$respons4","console","warn","code","detail","clearAuthDataAndRedirect","removeItem","window","location","href","loginUser","email","password","username"],"sources":["C:/Users/varsa/Quiz-Website-Project/frontend_react/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from \"axios\";\r\n\r\n// ✅ No trailing slash in API_URL\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:8000/api\";\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// ✅ Request Interceptor – Attach JWT access token from localStorage\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"access_token\");\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// ✅ Response Interceptor – Handle expired tokens & global errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const status = error.response?.status;\r\n    const originalRequest = error.config;\r\n\r\n    // 🟢 Handle expired/invalid token (401) with refresh attempt\r\n    if (status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n\r\n      const refreshToken = localStorage.getItem(\"refresh_token\");\r\n      if (refreshToken) {\r\n        try {\r\n          const refreshResponse = await axios.post(\r\n            `${API_URL}/token/refresh/`,\r\n            { refresh: refreshToken },\r\n            { headers: { \"Content-Type\": \"application/json\" } }\r\n          );\r\n\r\n          const newAccessToken = refreshResponse.data.access;\r\n          if (newAccessToken) {\r\n            localStorage.setItem(\"access_token\", newAccessToken);\r\n            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n            return api(originalRequest); // Retry the original request\r\n          }\r\n        } catch (refreshError) {\r\n          console.warn(\"Token refresh failed:\", refreshError);\r\n\r\n          // If token is blacklisted or not valid, stop retrying\r\n          if (\r\n            refreshError.response?.data?.code === \"token_not_valid\" ||\r\n            refreshError.response?.data?.detail === \"Token is blacklisted\"\r\n          ) {\r\n            clearAuthDataAndRedirect();\r\n            return Promise.reject(refreshError);\r\n          }\r\n        }\r\n      }\r\n\r\n      // ❌ If refresh fails or no refresh token, clear data & redirect\r\n      clearAuthDataAndRedirect();\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (status === 403) {\r\n      console.warn(\"Forbidden: You do not have permission to perform this action.\");\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Helper to clear all auth-related storage and redirect to login\r\nfunction clearAuthDataAndRedirect() {\r\n  localStorage.removeItem(\"access_token\");\r\n  localStorage.removeItem(\"refresh_token\");\r\n  localStorage.removeItem(\"user_id\");\r\n  localStorage.removeItem(\"user_email\");\r\n  localStorage.removeItem(\"user_name\");\r\n  localStorage.removeItem(\"quiz_isAuthenticated\");\r\n  window.location.href = \"/login\";\r\n}\r\n\r\n// 🆕 Login helper – ensures we always send username instead of email\r\nexport const loginUser = (email, password) => {\r\n  return api.post(\"token/\", {\r\n    username: email, // ✅ Backend expects \"username\"\r\n    password,\r\n  });\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}