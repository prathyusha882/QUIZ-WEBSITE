{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\n\n// Since we are using the React proxy (set in package.json), \n// we can just use /api as the base URL.\n// The proxy will forward requests to http://web:8000 inside Docker.\nconst API_BASE_URL = '/api';\n\n// Create an axios instance with the correct base URL\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // send cookies for CSRF/session authentication\n});\n\n// Request interceptor to add the authentication token from localStorage\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Token ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor for handling 401 Unauthorized errors globally\napi.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    console.warn('Authentication token expired or invalid. Please log in again.');\n    // Optionally clear token and redirect to login page\n    // localStorage.removeItem('authToken');\n    // window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","console","warn"],"sources":["/frontend_react/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\n// Since we are using the React proxy (set in package.json), \r\n// we can just use /api as the base URL.\r\n// The proxy will forward requests to http://web:8000 inside Docker.\r\nconst API_BASE_URL = '/api';\r\n\r\n// Create an axios instance with the correct base URL\r\nconst api = axios.create({\r\n  baseURL: '/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, // send cookies for CSRF/session authentication\r\n});\r\n\r\n// Request interceptor to add the authentication token from localStorage\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Token ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Response interceptor for handling 401 Unauthorized errors globally\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      console.warn('Authentication token expired or invalid. Please log in again.');\r\n      // Optionally clear token and redirect to login page\r\n      // localStorage.removeItem('authToken');\r\n      // window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA,MAAMC,YAAY,GAAG,MAAM;;AAE3B;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,SAASH,KAAK,EAAE;EACjD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAb,GAAG,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnDC,OAAO,CAACC,IAAI,CAAC,+DAA+D,CAAC;IAC7E;IACA;IACA;EACF;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}