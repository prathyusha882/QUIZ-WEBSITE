{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\varsa\\\\Quiz-Website-Project\\\\frontend_react\\\\src\\\\components\\\\auth\\\\PasswordResetRequestForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport api from '../../services/api';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PasswordResetRequestForm = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await api.post('/users/password/reset/', {\n        email\n      });\n      toast.success('If this email exists, a reset link has been sent.');\n      navigate('/login');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      toast.error((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Request failed. Try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-md mx-auto p-6 bg-white rounded shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-6 text-indigo-700\",\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block mb-2 font-semibold\",\n        htmlFor: \"email\",\n        children: \"Enter your registered email address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email\",\n        type: \"email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true,\n        className: \"w-full p-2 border rounded mb-6\",\n        autoComplete: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"w-full bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 rounded\",\n        children: \"Send Reset Link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(PasswordResetRequestForm, \"J7p/BBmoSTN1LG3mq3dDy/zGbg4=\", false, function () {\n  return [useNavigate];\n});\n_c = PasswordResetRequestForm;\nexport default PasswordResetRequestForm;\nvar _c;\n$RefreshReg$(_c, \"PasswordResetRequestForm\");","map":{"version":3,"names":["React","useState","toast","api","useNavigate","jsxDEV","_jsxDEV","PasswordResetRequestForm","_s","email","setEmail","navigate","handleSubmit","e","preventDefault","post","success","error","_error$response","_error$response$data","response","data","detail","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","id","type","value","onChange","target","required","autoComplete","_c","$RefreshReg$"],"sources":["C:/Users/varsa/Quiz-Website-Project/frontend_react/src/components/auth/PasswordResetRequestForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport api from '../../services/api';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst PasswordResetRequestForm = () => {\r\n  const [email, setEmail] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await api.post('/users/password/reset/', { email });\r\n      toast.success('If this email exists, a reset link has been sent.');\r\n      navigate('/login');\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.detail || 'Request failed. Try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-md mx-auto p-6 bg-white rounded shadow-md\">\r\n      <h1 className=\"text-3xl font-bold mb-6 text-indigo-700\">Reset Password</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <label className=\"block mb-2 font-semibold\" htmlFor=\"email\">Enter your registered email address</label>\r\n        <input\r\n          id=\"email\"\r\n          type=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n          className=\"w-full p-2 border rounded mb-6\"\r\n          autoComplete=\"email\"\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"w-full bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 rounded\"\r\n        >\r\n          Send Reset Link\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PasswordResetRequestForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,GAAG,MAAM,oBAAoB;AACpC,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMU,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9B,MAAMQ,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMX,GAAG,CAACY,IAAI,CAAC,wBAAwB,EAAE;QAAEN;MAAM,CAAC,CAAC;MACnDP,KAAK,CAACc,OAAO,CAAC,mDAAmD,CAAC;MAClEL,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,CAAC,OAAOM,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACdjB,KAAK,CAACe,KAAK,CAAC,CAAAA,KAAK,aAALA,KAAK,wBAAAC,eAAA,GAALD,KAAK,CAAEG,QAAQ,cAAAF,eAAA,wBAAAC,oBAAA,GAAfD,eAAA,CAAiBG,IAAI,cAAAF,oBAAA,uBAArBA,oBAAA,CAAuBG,MAAM,KAAI,4BAA4B,CAAC;IAC5E;EACF,CAAC;EAED,oBACEhB,OAAA;IAAKiB,SAAS,EAAC,iDAAiD;IAAAC,QAAA,gBAC9DlB,OAAA;MAAIiB,SAAS,EAAC,yCAAyC;MAAAC,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3EtB,OAAA;MAAMuB,QAAQ,EAAEjB,YAAa;MAAAY,QAAA,gBAC3BlB,OAAA;QAAOiB,SAAS,EAAC,0BAA0B;QAACO,OAAO,EAAC,OAAO;QAAAN,QAAA,EAAC;MAAmC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACvGtB,OAAA;QACEyB,EAAE,EAAC,OAAO;QACVC,IAAI,EAAC,OAAO;QACZC,KAAK,EAAExB,KAAM;QACbyB,QAAQ,EAAGrB,CAAC,IAAKH,QAAQ,CAACG,CAAC,CAACsB,MAAM,CAACF,KAAK,CAAE;QAC1CG,QAAQ;QACRb,SAAS,EAAC,gCAAgC;QAC1Cc,YAAY,EAAC;MAAO;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC,eACFtB,OAAA;QACE0B,IAAI,EAAC,QAAQ;QACbT,SAAS,EAAC,gFAAgF;QAAAC,QAAA,EAC3F;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACpB,EAAA,CAtCID,wBAAwB;EAAA,QAEXH,WAAW;AAAA;AAAAkC,EAAA,GAFxB/B,wBAAwB;AAwC9B,eAAeA,wBAAwB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}