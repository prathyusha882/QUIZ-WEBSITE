{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\n\n// Base URL — React's proxy in package.json will forward to backend\n// Example in package.json: \"proxy\": \"http://localhost:8000\"\nconst api = axios.create({\n  baseURL: '/api/',\n  // keep trailing slash to avoid double slashes\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Attach token from localStorage (if available) to every request\napi.interceptors.request.use(config => {\n  // The backend returns \"token\" in login response JSON\n  // Make sure we store it under 'access' in localStorage after login\n  const token = localStorage.getItem('access');\n  if (token) {\n    // Django REST Framework TokenAuthentication format\n    config.headers.Authorization = `Token ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Handle global 401 Unauthorized errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    console.warn('Authentication token expired or invalid. Redirecting to login...');\n    // Optionally clear token and redirect\n    // localStorage.removeItem('access');\n    // window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","console","warn"],"sources":["/frontend_react/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\n// Base URL — React's proxy in package.json will forward to backend\r\n// Example in package.json: \"proxy\": \"http://localhost:8000\"\r\nconst api = axios.create({\r\n  baseURL: '/api/', // keep trailing slash to avoid double slashes\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Attach token from localStorage (if available) to every request\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // The backend returns \"token\" in login response JSON\r\n    // Make sure we store it under 'access' in localStorage after login\r\n    const token = localStorage.getItem('access');\r\n    if (token) {\r\n      // Django REST Framework TokenAuthentication format\r\n      config.headers.Authorization = `Token ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Handle global 401 Unauthorized errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      console.warn('Authentication token expired or invalid. Redirecting to login...');\r\n      // Optionally clear token and redirect\r\n      // localStorage.removeItem('access');\r\n      // window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,OAAO;EAAE;EAClBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC5C,IAAIF,KAAK,EAAE;IACT;IACAD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,SAASH,KAAK,EAAE;EACjD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCC,OAAO,CAACC,IAAI,CAAC,kEAAkE,CAAC;IAChF;IACA;IACA;EACF;EACA,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}